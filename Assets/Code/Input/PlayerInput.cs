//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Code/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerGameplay"",
            ""id"": ""eb32e3c5-b1b9-4a7d-b440-6b74fb3b6729"",
            ""actions"": [
                {
                    ""name"": ""MouseMove"",
                    ""type"": ""Value"",
                    ""id"": ""d53ba3ec-b843-4b97-bf45-64f2b7ce37a5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseFire"",
                    ""type"": ""Button"",
                    ""id"": ""473333b1-99d6-43de-bfc4-dfe1bc8bf72e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseBoost"",
                    ""type"": ""Button"",
                    ""id"": ""8e372498-601e-45d5-928d-be85f2bf4ac3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8ffcd66b-84bd-4122-aa6a-6e97c71bbe92"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a87d3dc-b6c0-484a-bda3-512c4d445cab"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""027af44c-a7de-4fce-aa9b-b33e09c77f59"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseBoost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menus"",
            ""id"": ""07a8a490-76ef-4a16-aea8-fee45ea53d6b"",
            ""actions"": [
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""574facf7-4da0-47d4-b02a-ff2edb6a74b6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Progress"",
                    ""type"": ""Button"",
                    ""id"": ""62a743f6-a8c9-40a5-ae86-fc415374ec92"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6a4df825-08e7-43c9-81a1-4fa50ae474ae"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9f777e5-3fd7-4934-8830-45ab82858dc8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Progress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerGameplay
        m_PlayerGameplay = asset.FindActionMap("PlayerGameplay", throwIfNotFound: true);
        m_PlayerGameplay_MouseMove = m_PlayerGameplay.FindAction("MouseMove", throwIfNotFound: true);
        m_PlayerGameplay_MouseFire = m_PlayerGameplay.FindAction("MouseFire", throwIfNotFound: true);
        m_PlayerGameplay_MouseBoost = m_PlayerGameplay.FindAction("MouseBoost", throwIfNotFound: true);
        // Menus
        m_Menus = asset.FindActionMap("Menus", throwIfNotFound: true);
        m_Menus_Back = m_Menus.FindAction("Back", throwIfNotFound: true);
        m_Menus_Progress = m_Menus.FindAction("Progress", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_PlayerGameplay.enabled, "This will cause a leak and performance issues, PlayerInput.PlayerGameplay.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Menus.enabled, "This will cause a leak and performance issues, PlayerInput.Menus.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerGameplay
    private readonly InputActionMap m_PlayerGameplay;
    private List<IPlayerGameplayActions> m_PlayerGameplayActionsCallbackInterfaces = new List<IPlayerGameplayActions>();
    private readonly InputAction m_PlayerGameplay_MouseMove;
    private readonly InputAction m_PlayerGameplay_MouseFire;
    private readonly InputAction m_PlayerGameplay_MouseBoost;
    public struct PlayerGameplayActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerGameplayActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseMove => m_Wrapper.m_PlayerGameplay_MouseMove;
        public InputAction @MouseFire => m_Wrapper.m_PlayerGameplay_MouseFire;
        public InputAction @MouseBoost => m_Wrapper.m_PlayerGameplay_MouseBoost;
        public InputActionMap Get() { return m_Wrapper.m_PlayerGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerGameplayActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerGameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerGameplayActionsCallbackInterfaces.Add(instance);
            @MouseMove.started += instance.OnMouseMove;
            @MouseMove.performed += instance.OnMouseMove;
            @MouseMove.canceled += instance.OnMouseMove;
            @MouseFire.started += instance.OnMouseFire;
            @MouseFire.performed += instance.OnMouseFire;
            @MouseFire.canceled += instance.OnMouseFire;
            @MouseBoost.started += instance.OnMouseBoost;
            @MouseBoost.performed += instance.OnMouseBoost;
            @MouseBoost.canceled += instance.OnMouseBoost;
        }

        private void UnregisterCallbacks(IPlayerGameplayActions instance)
        {
            @MouseMove.started -= instance.OnMouseMove;
            @MouseMove.performed -= instance.OnMouseMove;
            @MouseMove.canceled -= instance.OnMouseMove;
            @MouseFire.started -= instance.OnMouseFire;
            @MouseFire.performed -= instance.OnMouseFire;
            @MouseFire.canceled -= instance.OnMouseFire;
            @MouseBoost.started -= instance.OnMouseBoost;
            @MouseBoost.performed -= instance.OnMouseBoost;
            @MouseBoost.canceled -= instance.OnMouseBoost;
        }

        public void RemoveCallbacks(IPlayerGameplayActions instance)
        {
            if (m_Wrapper.m_PlayerGameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerGameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerGameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerGameplayActions @PlayerGameplay => new PlayerGameplayActions(this);

    // Menus
    private readonly InputActionMap m_Menus;
    private List<IMenusActions> m_MenusActionsCallbackInterfaces = new List<IMenusActions>();
    private readonly InputAction m_Menus_Back;
    private readonly InputAction m_Menus_Progress;
    public struct MenusActions
    {
        private @PlayerInput m_Wrapper;
        public MenusActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Back => m_Wrapper.m_Menus_Back;
        public InputAction @Progress => m_Wrapper.m_Menus_Progress;
        public InputActionMap Get() { return m_Wrapper.m_Menus; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenusActions set) { return set.Get(); }
        public void AddCallbacks(IMenusActions instance)
        {
            if (instance == null || m_Wrapper.m_MenusActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenusActionsCallbackInterfaces.Add(instance);
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
            @Progress.started += instance.OnProgress;
            @Progress.performed += instance.OnProgress;
            @Progress.canceled += instance.OnProgress;
        }

        private void UnregisterCallbacks(IMenusActions instance)
        {
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
            @Progress.started -= instance.OnProgress;
            @Progress.performed -= instance.OnProgress;
            @Progress.canceled -= instance.OnProgress;
        }

        public void RemoveCallbacks(IMenusActions instance)
        {
            if (m_Wrapper.m_MenusActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenusActions instance)
        {
            foreach (var item in m_Wrapper.m_MenusActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenusActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenusActions @Menus => new MenusActions(this);
    public interface IPlayerGameplayActions
    {
        void OnMouseMove(InputAction.CallbackContext context);
        void OnMouseFire(InputAction.CallbackContext context);
        void OnMouseBoost(InputAction.CallbackContext context);
    }
    public interface IMenusActions
    {
        void OnBack(InputAction.CallbackContext context);
        void OnProgress(InputAction.CallbackContext context);
    }
}
